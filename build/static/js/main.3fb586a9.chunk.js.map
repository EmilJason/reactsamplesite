{"version":3,"sources":["components/Navbar.jsx","components/ActionButton.jsx","components/NewRecord.jsx","components/Person.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","ActionButton","openNewRecord","onClick","NewRecord","values","handleChange","onSave","closeNewRecord","style","position","backgroundColor","padding","width","height","zIndex","top","left","autoComplete","margin","marginTop","boxShadow","type","onChange","name","placeholder","value","Person","lists","firstname","App","state","middlename","surname","gender","age","newRecord","isOpen","renderNewRecordForm","closeNewRecordForm","openNewRecordForm","setState","e","preventDefault","target","renderPerson","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fb586a9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Navbar(){\r\n\treturn(\r\n\t\t<>\r\n\t\t\t<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n\t\t\t\t<h3 className=\"navbar-brand text-white-50\">SampleSite</h3>\r\n\t\t\t</nav>\r\n\t\t</>\r\n\t);\r\n}","import React from 'react';\r\n\r\n\r\nexport default function ActionButton({openNewRecord}){\r\n\treturn(\r\n\t\t<>\r\n\t\t\t<div className=\"bg-light d-flex\">\r\n\t\t\t\t<button \r\n\t\t\t\tclassName=\"btn btn-info btn-sm m-3 rounded\"\r\n\t\t\t\tonClick={openNewRecord}> + New Record</button>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}","import React from 'react';\r\n\r\n\r\nexport default function NewRecord({values, handleChange, onSave, closeNewRecord}){\r\n\t\r\n\treturn(\r\n\t\t<>\r\n\t\t\t<div style={{ position: \"fixed\", backgroundColor: \"rgba(255,255,255,0.5)\",padding: \"auto\", width: \"100%\", height: \"100vh\", zIndex: 1, top: 0, left: 0 }}>\r\n\t\t\t<form className=\"bg-light rounded shadow\" autoComplete=\"off\" style={{ width: \"50%\", zIndex: 1, margin: \"25%\", marginTop: \"5%\", padding: \"1%\", boxShadow: \"0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19)\" }}>\r\n\t\t\t\t<div className=\"d-flex justify-content-between align-items-center border-bottom border-info\">\r\n\t\t\t\t<h3 className=\"text-dark m-2\">New Record</h3>\r\n\t\t\t\t<button className=\" btn btn-sm\" onClick={closeNewRecord}>x</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"form-group d-flex\">\r\n\t\t\t\t\t<input type=\"text\" onChange={handleChange} className=\"form-control m-2\" name=\"firstname\" placeholder=\"Firstname\" />\r\n\t\t\t\t\t<input type=\"text\" onChange={handleChange} className=\"form-control m-2\" name=\"middlename\" placeholder=\"Middlename\"/>\r\n\t\t\t\t\t<input type=\"text\" onChange={handleChange} className=\"form-control m-2\" name=\"surname\" placeholder=\"Surname\"/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"form-group d-flex\">\r\n\t\t\t\t\t<select className=\"form-control m-2\" name=\"gender\">\r\n\t\t\t\t\t\t<option>Male</option>\r\n\t\t\t\t\t\t<option>Female</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t\t<input type=\"text\" onChange={handleChange} className=\"form-control m-2\" name=\"age\" placeholder=\"Age\"/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input type=\"submit\" onClick={onSave} className=\"btn btn-success form-control m-2\" value=\"Save\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}","import React from 'react';\r\n\r\nexport default function Person({lists}){\r\n\treturn(\r\n\r\n\t\t<li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n\t\t\t{lists.firstname} <button className=\"btn btn-primary btn-sm rounded-circle\">View</button>\r\n\t\t</li>\r\n\t);\r\n}","import React, {Component} from 'react';\nimport Navbar from './components/Navbar';\nimport ActionButton from './components/ActionButton';\nimport NewRecord from './components/NewRecord';\nimport Person from './components/Person';\n\n\n\nclass App extends Component{\n\tstate={\n\t\tfirstname: '',\n\t\tmiddlename: '',\n\t\tsurname: '',\n\t\tgender: '',\n\t\tage: '',\n\t\t\n\t\tlists: '',\n\t\t\n\t\tnewRecord:{ isOpen: false }\n\t}\n\t\n\trenderNewRecordForm=()=>{\n\t\tif (this.state.newRecord.isOpen){\n\t\t\treturn(\n\t\t\t\t<NewRecord values={this.state} \n\t\t\t\thandleChange={this.handleChange} \n\t\t\t\tonSave={this.onSave} \n\t\t\t\tcloseNewRecord={this.closeNewRecordForm}/>\n\t\t\t);\n\t\t}\n\t}\n\topenNewRecordForm=()=>{\n\t\tthis.setState({newRecord:{isOpen: true}});\n\t}\n\tcloseNewRecordForm=()=>{\n\t\tthis.setState({newRecord:{isOpen: false}});\n\t}\n\thandleChange= e =>{\n\t\te.preventDefault();\n\t\tthis.setState({[e.target.name]: e.target.value});\n\t}\n\tonSave=(e)=>{\n\t\te.preventDefault();\n\t\tthis.setState({lists: this.state});\n\t\tthis.renderPerson();\n\t}\n\trenderPerson=()=>{\n\t\tif (this.state.lists){\n\t\t\treturn(\n\t\t\t<ul className=\"list-group m-3\">\n\t\t\t<Person lists={this.state.lists} />\n\t\t\t</ul>\n\t\t\t);\n\t\t}else{\n\t\t\treturn \"No lists to display!\";\n\t\t}\n\t}\n\t\n\trender(){\n\t\treturn(\n\t\t\t<>\n\t\t\t\t<Navbar />\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<ActionButton openNewRecord={this.openNewRecordForm} />\n\t\t\t\t\t\t\n\t\t\t\t\t{this.renderNewRecordForm()}\n\t\t\t\t\t\t\n\t\t\t\t\t{this.renderPerson()}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t};\n\t\n\t\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}